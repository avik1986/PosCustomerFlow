package com.pos.customer.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AddressDetailsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAddressDetailsAllPropertiesEquals(AddressDetails expected, AddressDetails actual) {
        assertAddressDetailsAutoGeneratedPropertiesEquals(expected, actual);
        assertAddressDetailsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAddressDetailsAllUpdatablePropertiesEquals(AddressDetails expected, AddressDetails actual) {
        assertAddressDetailsUpdatableFieldsEquals(expected, actual);
        assertAddressDetailsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAddressDetailsAutoGeneratedPropertiesEquals(AddressDetails expected, AddressDetails actual) {
        assertThat(actual)
            .as("Verify AddressDetails auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAddressDetailsUpdatableFieldsEquals(AddressDetails expected, AddressDetails actual) {
        assertThat(actual)
            .as("Verify AddressDetails relevant properties")
            .satisfies(a -> assertThat(a.getAddressDetailType()).as("check addressDetailType").isEqualTo(expected.getAddressDetailType()))
            .satisfies(a -> assertThat(a.getMobileNo()).as("check mobileNo").isEqualTo(expected.getMobileNo()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getLabel()).as("check label").isEqualTo(expected.getLabel()))
            .satisfies(a -> assertThat(a.getAddressLine1()).as("check addressLine1").isEqualTo(expected.getAddressLine1()))
            .satisfies(a -> assertThat(a.getAddressLine2()).as("check addressLine2").isEqualTo(expected.getAddressLine2()))
            .satisfies(a -> assertThat(a.getAddressLine3()).as("check addressLine3").isEqualTo(expected.getAddressLine3()))
            .satisfies(a -> assertThat(a.getFloorNo()).as("check floorNo").isEqualTo(expected.getFloorNo()))
            .satisfies(a -> assertThat(a.getPincode()).as("check pincode").isEqualTo(expected.getPincode()))
            .satisfies(a -> assertThat(a.getArea()).as("check area").isEqualTo(expected.getArea()))
            .satisfies(a -> assertThat(a.getCity()).as("check city").isEqualTo(expected.getCity()))
            .satisfies(a -> assertThat(a.getCountry()).as("check country").isEqualTo(expected.getCountry()))
            .satisfies(a -> assertThat(a.getLandmark()).as("check landmark").isEqualTo(expected.getLandmark()))
            .satisfies(a -> assertThat(a.getLatitude()).as("check latitude").isEqualTo(expected.getLatitude()))
            .satisfies(a -> assertThat(a.getLongitude()).as("check longitude").isEqualTo(expected.getLongitude()))
            .satisfies(a -> assertThat(a.getIsActive()).as("check isActive").isEqualTo(expected.getIsActive()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getUpdatedAt()).as("check updatedAt").isEqualTo(expected.getUpdatedAt()))
            .satisfies(a -> assertThat(a.getCreatedBy()).as("check createdBy").isEqualTo(expected.getCreatedBy()))
            .satisfies(a -> assertThat(a.getUpdatedBy()).as("check updatedBy").isEqualTo(expected.getUpdatedBy()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAddressDetailsUpdatableRelationshipsEquals(AddressDetails expected, AddressDetails actual) {
        assertThat(actual)
            .as("Verify AddressDetails relationships")
            .satisfies(a -> assertThat(a.getCustomer()).as("check customer").isEqualTo(expected.getCustomer()));
    }
}
